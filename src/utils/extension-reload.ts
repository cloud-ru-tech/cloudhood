// Utility for automatic browser extension reload in development mode
let reconnectAttempts = 0;
const maxReconnectAttempts = 10;
let reconnectTimeout: NodeJS.Timeout | null = null;

export const enableExtensionReload = (): void => {
  if (process.env.NODE_ENV !== 'development') {
    console.warn('üîÑ Extension reload is only available in development mode');
    return;
  }

  // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  if (reconnectTimeout) {
    clearTimeout(reconnectTimeout);
    reconnectTimeout = null;
  }

  try {
    // eslint-disable-next-line no-console
    console.log('üîÑ Attempting to connect to WebSocket server...');
    const ws = new WebSocket('ws://localhost:3333');

    ws.onmessage = event => {
      try {
        const message = JSON.parse(event.data);
        // eslint-disable-next-line no-console
        console.log('üîÑ Received reload message:', message);

        if (message.type === 'reload') {
          // eslint-disable-next-line no-console
          console.log('üîÑ Reloading extension...');

          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏
          setTimeout(() => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å chrome.runtime.reload
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const chromeAPI = (globalThis as any).chrome;
            if (chromeAPI && chromeAPI.runtime && chromeAPI.runtime.reload) {
              try {
                chromeAPI.runtime.reload();
              } catch (error) {
                console.error('‚ùå Error during extension reload:', error);
                // Fallback - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ location
                if (typeof window !== 'undefined') {
                  window.location.reload();
                }
              }
            } else {
              console.error('‚ùå chrome.runtime.reload is not available');
              // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ location
              if (typeof window !== 'undefined') {
                window.location.reload();
              }
            }
          }, 200); // –ñ–¥–µ–º 200–º—Å –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–æ–≤
        }
      } catch (error) {
        console.error('‚ùå Error parsing WebSocket message:', error);
      }
    };

    ws.onopen = () => {
      // eslint-disable-next-line no-console
      console.log('‚úÖ Extension reload WebSocket connected successfully');
      reconnectAttempts = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    };

    ws.onclose = event => {
      // eslint-disable-next-line no-console
      console.log(`üîå Extension reload WebSocket disconnected (code: ${event.code}, reason: ${event.reason})`);

      if (process.env.NODE_ENV === 'development' && reconnectAttempts < maxReconnectAttempts) {
        reconnectAttempts++;
        const delay = Math.min(1000 * reconnectAttempts, 5000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 5 —Å–µ–∫—É–Ω–¥

        // eslint-disable-next-line no-console
        console.log(`üîÑ Attempting to reconnect in ${delay}ms (attempt ${reconnectAttempts}/${maxReconnectAttempts})`);

        reconnectTimeout = setTimeout(() => {
          enableExtensionReload();
        }, delay);
      } else if (reconnectAttempts >= maxReconnectAttempts) {
        console.error('‚ùå Max reconnection attempts reached. Please restart the dev server.');
      }
    };

    ws.onerror = error => {
      console.error('‚ùå Extension reload WebSocket error:', error);
    };
  } catch (error) {
    console.error('‚ùå Failed to create WebSocket connection:', error);

    if (process.env.NODE_ENV === 'development' && reconnectAttempts < maxReconnectAttempts) {
      reconnectAttempts++;
      const delay = Math.min(1000 * reconnectAttempts, 5000);

      // eslint-disable-next-line no-console
      console.log(`üîÑ Retrying connection in ${delay}ms (attempt ${reconnectAttempts}/${maxReconnectAttempts})`);

      reconnectTimeout = setTimeout(() => {
        enableExtensionReload();
      }, delay);
    }
  }
};
