import { WebSocketServer } from 'ws';
import pino from 'pino';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
const logger = pino({
  level: process.env.LOG_LEVEL || 'info',
  transport: {
    target: 'pino-pretty',
    options: {
      colorize: true,
      translateTime: 'HH:MM:ss',
      ignore: 'pid,hostname'
    }
  }
});

let wss = null;
let isShuttingDown = false;

async function createServer() {
  try {
    const port = process.env.WS_PORT ? parseInt(process.env.WS_PORT, 10) : 3333;

    wss = new WebSocketServer({
      port,
      perMessageDeflate: false,
      clientTracking: true
    });

    logger.info(`üîÑ Extension reload WebSocket server started on port ${port}`);

    wss.on('connection', (ws) => {
      logger.info('üì± Extension reload client connected');

      ws.on('close', () => {
        logger.info('üì± Extension reload client disconnected');
      });

      ws.on('error', (error) => {
        logger.error('‚ùå WebSocket client error:', error.message);
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      const pingInterval = setInterval(() => {
        if (ws.readyState === 1) { // WebSocket.OPEN
          ws.ping();
        } else {
          clearInterval(pingInterval);
        }
      }, 30000);

      ws.on('close', () => {
        clearInterval(pingInterval);
      });
    });

    wss.on('error', (error) => {
      logger.error('‚ùå WebSocket server error:', error.message);
      if (!isShuttingDown) {
        logger.info('üîÑ Attempting to restart WebSocket server in 2 seconds...');
        setTimeout(() => {
          if (!isShuttingDown) {
            createServer();
          }
        }, 2000);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGINT', () => {
      isShuttingDown = true;
      logger.info('üõë Shutting down WebSocket server...');
      if (wss) {
        wss.close(() => {
          process.exit(0);
        });
      } else {
        process.exit(0);
      }
    });

    process.on('SIGTERM', () => {
      isShuttingDown = true;
      logger.info('üõë Shutting down WebSocket server...');
      if (wss) {
        wss.close(() => {
          process.exit(0);
        });
      } else {
        process.exit(0);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    process.on('uncaughtException', (error) => {
      logger.error('‚ùå Uncaught exception:', error.message);
      if (!isShuttingDown) {
        logger.info('üîÑ Restarting WebSocket server...');
        setTimeout(() => {
          if (!isShuttingDown) {
            createServer();
          }
        }, 1000);
      }
    });

    process.on('unhandledRejection', (reason, promise) => {
      logger.error('‚ùå Unhandled rejection at:', promise, 'reason:', reason);
    });

  } catch (error) {
    logger.error('‚ùå Failed to create WebSocket server:', error.message);
    if (!isShuttingDown) {
      setTimeout(() => {
        if (!isShuttingDown) {
          createServer();
        }
      }, 2000);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
function notifyReload(file) {
  if (wss && wss.clients) {
    logger.info(`üîÑ Sending reload signal to ${wss.clients.size} clients`);
    wss.clients.forEach((client) => {
      if (client.readyState === 1) { // WebSocket.OPEN
        try {
          client.send(JSON.stringify({ type: 'reload', file }));
        } catch (error) {
          logger.error('‚ùå Error sending reload signal:', error.message);
        }
      }
    });
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
global.notifyReload = notifyReload;

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
createServer();