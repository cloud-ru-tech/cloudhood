const fs = require('fs-extra');
const path = require('path');
const { execSync } = require('child_process');

const PROJECT_ROOT = path.resolve(__dirname, '..');

// –§–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤
const EXCLUDE_PATTERNS = [
  'node_modules',
  'dist',
  'build',
  'firefox-sources',
  '.git',
  '.github',
  'coverage',
  'reports',
  '*.log',
  '.DS_Store',
  'Thumbs.db',
  '.vscode',
  '.idea',
  '*.zip',
  '*.tar.gz',
  '.env',
  '.env.local',
  '.env.production',
  '.env.development',
  'tests',
];

// –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
const INCLUDE_FILES = [
  'package.json',
  'package-lock.json',
  'README.md',
  'LICENSE',
  'CODEOWNERS',
  'RELEASE_SETUP.md',
  'tsconfig.json',
  'webpack.config.js',
  'lint-staged.config.js',
  'stylelint.config.js',
  'vitest.config.ts',
  'manifest.chromium.json',
  'manifest.firefox.json',
];

// –ü–∞–ø–∫–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è
const INCLUDE_DIRECTORIES = ['src', 'scripts'];

function shouldExclude(filePath, relativePath) {
  return EXCLUDE_PATTERNS.some(pattern => {
    if (pattern.includes('*')) {
      return relativePath.includes(pattern.replace(/\*/g, ''));
    }
    return relativePath.includes(pattern);
  });
}

async function createBuildInstructions() {
  console.log('üìù –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–±–æ—Ä–∫–µ...');

  const instructions = `# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–±–æ—Ä–∫–µ CloudHood –¥–ª—è Firefox

## –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è

- Node.js –≤–µ—Ä—Å–∏–∏ 18 –∏–ª–∏ –≤—ã—à–µ
- pnpm –≤–µ—Ä—Å–∏–∏ 10.10.0 –∏–ª–∏ –≤—ã—à–µ

## –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

\`\`\`bash
pnpm install
\`\`\`

## –°–±–æ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

–î–ª—è —Å–±–æ—Ä–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è Firefox –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:

\`\`\`bash
pnpm build:firefox
\`\`\`

–°–æ–±—Ä–∞–Ω–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –ø–∞–ø–∫–µ \`dist/firefox/\`.

## –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

- \`pnpm lint\` - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
- \`pnpm test:unit\` - –∑–∞–ø—É—Å–∫ —é–Ω–∏—Ç-—Ç–µ—Å—Ç–æ–≤
- \`pnpm start:firefox\` - –∑–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è Firefox
- \`pnpm build:chromium\` - —Å–±–æ—Ä–∫–∞ –¥–ª—è Chromium/Chrome

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

- \`src/\` - –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
- \`scripts/\` - —Å–∫—Ä–∏–ø—Ç—ã —Å–±–æ—Ä–∫–∏
- \`manifest.firefox.json\` - –º–∞–Ω–∏—Ñ–µ—Å—Ç –¥–ª—è Firefox
- \`manifest.chromium.json\` - –º–∞–Ω–∏—Ñ–µ—Å—Ç –¥–ª—è Chromium
- \`webpack.config.js\` - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Webpack
- \`tsconfig.json\` - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è TypeScript

## –§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

- \`lint-staged.config.js\` - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pre-commit —Ö—É–∫–æ–≤
- \`stylelint.config.js\` - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è StyleLint
- \`vitest.config.ts\` - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤

## –ü—Ä–∏–º–µ—á–∞–Ω–∏—è

–î–∞–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–µ –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–æ–¥—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è CloudHood.
–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É–∫–∞–∑–∞–Ω—ã –≤ package.json –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ \`pnpm install\`.

–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ Firefox, —Ç–∞–∫ –∏ Chromium-–±—Ä–∞—É–∑–µ—Ä—ã.
–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –±—Ä–∞—É–∑–µ—Ä–∞.
`;

  await fs.writeFile(path.join(PROJECT_ROOT, 'BUILD_INSTRUCTIONS.md'), instructions);
  console.log('‚úì BUILD_INSTRUCTIONS.md');
}

async function createSourcesArchive() {
  console.log('üì¶ –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ —Å –∏—Å—Ö–æ–¥–Ω–∏–∫–∞–º–∏...');

  const archiveName = `cloudhood-firefox-sources.zip`;
  const archivePath = path.join(PROJECT_ROOT, archiveName);

  try {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∞—Ä—Ö–∏–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (await fs.pathExists(archivePath)) {
      await fs.remove(archivePath);
    }

    // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞—Ä—Ö–∏–≤–∞
    const filesToArchive = [];

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    for (const file of INCLUDE_FILES) {
      const filePath = path.join(PROJECT_ROOT, file);
      if (await fs.pathExists(filePath)) {
        filesToArchive.push(file);
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫–∏
    for (const dir of INCLUDE_DIRECTORIES) {
      const dirPath = path.join(PROJECT_ROOT, dir);
      if (await fs.pathExists(dirPath)) {
        filesToArchive.push(dir);
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    const rootFiles = await fs.readdir(PROJECT_ROOT);
    for (const file of rootFiles) {
      const filePath = path.join(PROJECT_ROOT, file);
      const stats = await fs.stat(filePath);

      if (stats.isFile() && !INCLUDE_FILES.includes(file)) {
        if (
          file.includes('.config.') ||
          file.startsWith('.') ||
          file.endsWith('.json') ||
          file.endsWith('.js') ||
          file.endsWith('.ts') ||
          file.endsWith('.md')
        ) {
          if (!shouldExclude(filePath, file)) {
            filesToArchive.push(file);
          }
        }
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º BUILD_INSTRUCTIONS.md
    filesToArchive.push('BUILD_INSTRUCTIONS.md');

    // –°–æ–∑–¥–∞–µ–º zip –∞—Ä—Ö–∏–≤
    const filesList = filesToArchive.join(' ');
    execSync(`cd "${PROJECT_ROOT}" && zip -r "${archiveName}" ${filesList}`, {
      stdio: 'inherit',
    });

    console.log(`‚úì –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: ${archiveName}`);
    console.log(`üìç –ü—É—Ç—å: ${archivePath}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞
    const stats = await fs.stat(archivePath);
    const sizeMB = (stats.size / (1024 * 1024)).toFixed(2);
    console.log(`üìä –†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: ${sizeMB} MB`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞:', error.message);
    process.exit(1);
  }
}

async function validateSources() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞...');

  const requiredFiles = ['package.json', 'src', 'scripts', 'manifest.firefox.json'];

  for (const file of requiredFiles) {
    const filePath = path.join(PROJECT_ROOT, file);
    if (!(await fs.pathExists(filePath))) {
      console.error(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª: ${file}`);
      process.exit(1);
    }
  }

  console.log('‚úì –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
}

async function main() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É –∞—Ä—Ö–∏–≤–∞ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ –¥–ª—è Firefox Store...\n');

    await createBuildInstructions();
    console.log('');

    await validateSources();
    console.log('');

    await createSourcesArchive();
    console.log('');

    // –£–¥–∞–ª—è–µ–º BUILD_INSTRUCTIONS.md –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞
    await fs.remove(path.join(PROJECT_ROOT, 'BUILD_INSTRUCTIONS.md'));

    console.log('‚úÖ –°–±–æ—Ä–∫–∞ –∞—Ä—Ö–∏–≤–∞ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üîç –ê—Ä—Ö–∏–≤ –≥–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Firefox Store');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤:', error);
    process.exit(1);
  }
}

main();
main();
